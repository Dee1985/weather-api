// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toWeather(json) {
  return cast(JSON.parse(json), r("Weather"));
}

function weatherToJson(value) {
  return JSON.stringify(uncast(value, r("Weather")), null, 2);
}

function invalidValue(typ, val) {
  throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
  if (typ.jsonToJS === undefined) {
      var map = {};
      typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
      typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}

function jsToJSONProps(typ) {
  if (typ.jsToJSON === undefined) {
      var map = {};
      typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
      typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}

function transform(val, typ, getProps) {
  function transformPrimitive(typ, val) {
      if (typeof typ === typeof val) return val;
      return invalidValue(typ, val);
  }

  function transformUnion(typs, val) {
      // val must validate against one typ in typs
      var l = typs.length;
      for (var i = 0; i < l; i++) {
          var typ = typs[i];
          try {
              return transform(val, typ, getProps);
          } catch (_) {}
      }
      return invalidValue(typs, val);
  }

  function transformEnum(cases, val) {
      if (cases.indexOf(val) !== -1) return val;
      return invalidValue(cases, val);
  }

  function transformArray(typ, val) {
      // val must be an array with no invalid elements
      if (!Array.isArray(val)) return invalidValue("array", val);
      return val.map(el => transform(el, typ, getProps));
  }

  function transformObject(props, additional, val) {
      if (val === null || typeof val !== "object" || Array.isArray(val)) {
          return invalidValue("object", val);
      }
      var result = {};
      Object.getOwnPropertyNames(props).forEach(key => {
          const prop = props[key];
          const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
          result[prop.key] = transform(v, prop.typ, getProps);
      });
      Object.getOwnPropertyNames(val).forEach(key => {
          if (!Object.prototype.hasOwnProperty.call(props, key)) {
              result[key] = transform(val[key], additional, getProps);
          }
      });
      return result;
  }

  if (typ === "any") return val;
  if (typ === null) {
      if (val === null) return val;
      return invalidValue(typ, val);
  }
  if (typ === false) return invalidValue(typ, val);
  while (typeof typ === "object" && typ.ref !== undefined) {
      typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ)) return transformEnum(typ, val);
  if (typeof typ === "object") {
      return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
          : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
          : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
          : invalidValue(typ, val);
  }
  return transformPrimitive(typ, val);
}

function cast(val, typ) {
  return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
  return transform(val, typ, jsToJSONProps);
}

function a(typ) {
  return { arrayItems: typ };
}

function u(...typs) {
  return { unionMembers: typs };
}

function o(props, additional) {
  return { props, additional };
}

function m(additional) {
  return { props: [], additional };
}

function r(name) {
  return { ref: name };
}

const typeMap = {
  "Weather": o([
      { json: "coord", js: "coord", typ: r("Coord") },
      { json: "weather", js: "weather", typ: a(r("WeatherElement")) },
      { json: "base", js: "base", typ: "" },
      { json: "main", js: "main", typ: r("Main") },
      { json: "visibility", js: "visibility", typ: 0 },
      { json: "wind", js: "wind", typ: r("Wind") },
      { json: "clouds", js: "clouds", typ: r("Clouds") },
      { json: "dt", js: "dt", typ: 0 },
      { json: "sys", js: "sys", typ: r("Sys") },
      { json: "timezone", js: "timezone", typ: 0 },
      { json: "id", js: "id", typ: 0 },
      { json: "name", js: "name", typ: "" },
      { json: "cod", js: "cod", typ: 0 },
  ], false),
  "Clouds": o([
      { json: "all", js: "all", typ: 0 },
  ], false),
  "Coord": o([
      { json: "lon", js: "lon", typ: 3.14 },
      { json: "lat", js: "lat", typ: 3.14 },
  ], false),
  "Main": o([
      { json: "temp", js: "temp", typ: 3.14 },
      { json: "pressure", js: "pressure", typ: 0 },
      { json: "humidity", js: "humidity", typ: 0 },
      { json: "temp_min", js: "temp_min", typ: 3.14 },
      { json: "temp_max", js: "temp_max", typ: 3.14 },
  ], false),
  "Sys": o([
      { json: "type", js: "type", typ: 0 },
      { json: "id", js: "id", typ: 0 },
      { json: "country", js: "country", typ: "" },
      { json: "sunrise", js: "sunrise", typ: 0 },
      { json: "sunset", js: "sunset", typ: 0 },
  ], false),
  "WeatherElement": o([
      { json: "id", js: "id", typ: 0 },
      { json: "main", js: "main", typ: "" },
      { json: "description", js: "description", typ: "" },
      { json: "icon", js: "icon", typ: "" },
  ], false),
  "Wind": o([
      { json: "speed", js: "speed", typ: 3.14 },
      { json: "deg", js: "deg", typ: 0 },
  ], false),
};

module.exports = {
  "weatherToJson": weatherToJson,
  "toWeather": toWeather,
};